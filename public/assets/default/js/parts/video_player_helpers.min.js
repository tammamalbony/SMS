(() => {
  var __webpack_exports__ = {};
  var fileVideoPlayer;
  var storage;
  var videoTagId;
  let intervalId;
  // var chapters = [{
  //     title: 'Chapter 1',
  //     time: 10
  //   },
  //   {
  //     title: 'Chapter 2',
  //     time: 30
  //   },
  //   {
  //     title: 'Chapter 3',
  //     time: 60
  //   }
  // ];
  window.makeVideoPlayerHtml = function (path, storage, height, tagId) {
    var html = '';
    var options = {
      autoplay: false,
      preload: 'auto'
    };
    if (storage === 'youtube') {
      html = '<video id="' + tagId + '" class="video-js" width="100%" height="' + height + '"></video>';
      options = {
        controls: storage !== 'vimeo',
        ytControls: true,
        autoplay: false,
        preload: 'auto',
        techOrder: ['html5', storage],
        sources: [{
          src: path,
          type: "video/" + storage
        }]
      };
    } else if (storage === 'vimeo') {
      var videoID = path.match(/\d+/)[0];
      html = '<iframe id="' + tagId + '" src="https://player.vimeo.com/video/' + videoID + '?" width="100%" class="vimeo-iframe-player"  height="' + height + '" frameborder="0" allowfullscreen></iframe>';
      options = {
        controls: storage !== 'vimeo',
        ytControls: true,
        autoplay: false,
        preload: 'auto',
        techOrder: ['html5', storage],
        sources: [{
          src: path,
          type: "video/" + storage
        }]
      };
    } else if (storage === "secure_host") {
      html = '<iframe src="' + path + '" class="img-cover bg-gray200" frameborder="0" allowfullscreen="true" ></iframe>';
    } else {
      html = '<video id="' + tagId + '" oncontextmenu="return false;" controlsList="nodownload" class="video-js" controls preload="auto" width="100%" height="' + height + '"><source src="' + path + '" type="video/mp4"/></video>';
    }
    return {
      html: html,
      options: options
    };
  };
  window.handleVideoByFileId = function (fileId, $contentEl, callback) {
    var height = $(window).width() > 991 ? 426 : 264;
    $.post('/course/getFilePath', {
      file_id: fileId
    }, function (result) {
      if (result && result.code === 200) {
        storage = result.storage;
        videoTagId = 'videoPlayer' + fileId;
        let resumeTime = 0;
        $.get('/getVideoProgress', {
          fileId: fileId
        }, function (progress) {
          if (progress && progress.vedio_time) {
            resumeTime = progress.vedio_time;
            console.log("resumeTime : " + resumeTime);
          }
          console.log("storage result : " + result.storage)
          var _makeVideoPlayerHtml = makeVideoPlayerHtml(result.path, storage, height, videoTagId),
          html = _makeVideoPlayerHtml.html,
          options = _makeVideoPlayerHtml.options;
          $contentEl.html(html);
          if (result.storage == "vimeo") {

            let videoID = result.path.match(/\d+/)[0];
            var script = document.createElement('script');
            script.src = "https://player.vimeo.com/api/player.js";
            script.onload = function () {
              if (typeof Vimeo !== 'undefined'  && typeof Vimeo.Player !== 'undefined') {
                // console.log('Vimeo player API loaded.');
                const player = new Vimeo.Player(videoTagId, {
                  id: videoID,
                });
                let lastStoredTime = 0;
                function onTimeUpdate(data) {
                  // console.log("Time Upadated : " + data.seconds)
                  var edge = lastStoredTime +10;
                  if(data.seconds > edge){
                    storingVideoProcess(true ,fileId,data.seconds );
                    lastStoredTime = data.seconds;
                  }
                }
                player.on("timeupdate", onTimeUpdate);
                player.setCurrentTime(resumeTime);
              } else {
                console.error('Vimeo player API not loaded.');
              }
            };
            document.head.appendChild(script);
          } else {
            closeVideoPlayer();
            fileVideoPlayer = videojs(videoTagId, options);
            if (resumeTime != 0) {
              fileVideoPlayer.ready(function () {
                fileVideoPlayer.on('loadedmetadata', function () {
                  var duration = fileVideoPlayer.duration();
                  if (resumeTime > duration) {
                    resumeTime = duration;
                  }
                  fileVideoPlayer.currentTime(resumeTime);
                  fileVideoPlayer.play();
                });
              });
            }
          }
          callback();
          let loggingIntervalId = startAnyLogging(fileId);
        });
       

      } else {
        $.toast({
          heading: notAccessToastTitleLang,
          text: notAccessToastMsgLang,
          bgColor: '#f63c3c',
          textColor: 'white',
          hideAfter: 10000,
          position: 'bottom-right',
          icon: 'error'
        });
      }
    }).fail(function (err) {
      $.toast({
        heading: notAccessToastTitleLang,
        text: notAccessToastMsgLang,
        bgColor: '#f63c3c',
        textColor: 'white',
        hideAfter: 10000,
        position: 'bottom-right',
        icon: 'error'
      });
    });
  };

  window.initVimeoPlayer = function (videoId, container, startTime) {

    return player;
  }
  window.closeVideoPlayer = function () {
    if (fileVideoPlayer !== undefined) {
      fileVideoPlayer.dispose();
    }
  };
  window.pauseVideoPlayer = function () {
    if (fileVideoPlayer !== undefined) {
      fileVideoPlayer.pause();
    }
  };
  window.getCurrentVideoTime = function () {
    if (fileVideoPlayer !== undefined) {
      return fileVideoPlayer.currentTime();
    }
    return 0;
  };
  window.isVideoPlaying = function () {
    if (fileVideoPlayer !== undefined) {
      return !fileVideoPlayer.paused();
    }
    return false;
  };
  window.startAnyLogging = function (fileId) {
    const logVideoStatus = function () {
      if (fileVideoPlayer !== undefined && storage != 'vimeo') {
        var currentTimePromise = Promise.resolve(fileVideoPlayer.currentTime());
        currentTimePromise.then(function (currentTime) {
          var isPlaying = !fileVideoPlayer.paused();
          storingVideoProcess(isPlaying, fileId, currentTime);
        });
        
      } else if (storage === 'vimeo') {
        clearInterval(intervalId); 
      }else {
        console.warn('sorry error at storing video progress: try to handel  correctly !');
      }
    };

    logVideoStatus();
     intervalId = setInterval(logVideoStatus, 10000);
    return intervalId;
  };
  window.storingVideoProcess = function (isPlaying, fileId, currentTime) {
    if (isPlaying) {
      $.ajax({
        url: '/storeVideoProgress',
        method: 'GET',
        data: {
          fileId: fileId,
          currentTime: currentTime,
          isPlaying: isPlaying
        },
        success: function (response) {
          console.log("Video Progress stored  successfuly : " + currentTime );
        },
        error: function (xhr, status, error) {
          console.error('Error storing video progress:', error);
        }
      });
    }
  }
  /******/
})();